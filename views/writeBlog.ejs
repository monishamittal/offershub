<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Blog Form</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Allerta&family=Dosis:wght@200..800&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Manrope:wght@200..800&family=Noto+Sans:ital,wght@0,100..900;1,100..900&family=Nunito+Sans:ital,opsz,wght@0,6..12,200..1000;1,6..12,200..1000&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&family=Share:ital,wght@0,400;0,700;1,400;1,700&family=Space+Grotesk:wght@300..700&display=swap');

        body {
            font-family: "Manrope", serif;
            margin: 20px;
            line-height: 1.6;
            background-color: #f4f4f4;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        form {
            /* max-width: 600px; */
            margin: auto;
            padding: 20px;
            background: #fff;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        label {
            /* font-weight: bold; */
            display: block;
            margin-bottom: 8px;
            color: #555;
        }

        input,
        textarea,
        select {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        button {
            background-color: #007BFF;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }

        button:hover {
            background-color: #0056b3;
        }

        .blog-preview {
            max-width: 800px;
            margin: 40px auto;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .blog-preview img {
            max-width: 100%;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .blog-preview h1,
        .blog-preview h2 {
            margin-bottom: 10px;
            color: #333;
        }

        .blog-preview ul,
        .blog-preview ol {
            margin: 15px 0;
            padding-left: 20px;
        }

        .blog-preview ul li,
        .blog-preview ol li {
            margin-bottom: 5px;
        }

        @media (max-width: 768px) {

            form,
            .blog-preview {
                padding: 15px;
            }

            button {
                font-size: 14px;
            }
        }

        .tag-selector {
            list-style-type: none;
            background-color: rgba(152, 152, 152, 0.167);
            padding: 10px;
            display: flex;
            flex-direction: row;
            gap: 10px;
            width: fit-content;
            margin-bottom: 10px;
            justify-content: center;
            align-items: center;
            max-width: fit-content;
            margin-inline: auto;
            flex-wrap: wrap;
        }

        .tag-selector li {
            background-color: rgb(249 249 249);
            border: 1px solid black;
            border-style: dashed;
            width: fit-content;
            padding: 5px;
            cursor: pointer;
        }

        .tag-selector li:hover {
            background-color: white;
        }

        .options {
            display: flex;
            gap: 10px;
            align-items: baseline;
            padding: 10px;

        }

        .types {
            display: flex;
            gap: 10px;
            justify-content: center;
            align-items: center;
        }

        .options span {
            border: 1px solid black;
            border-style: dashed;
            width: fit-content;
            padding: 3px;
            cursor: pointer;
        }

        .header-image {
            width: 100%;
            height: auto;
        }

        .small-title {
            font-size: 1.2em;
            color: #555;
            margin-top: 20px;
        }

        .main-title {
            font-size: 2.5em;
            margin: 10px 0;
        }

        .sub-heading {
            font-size: 2.0em;
        }

        .sub-image {
            width: 100%;
            height: auto;
        }

        .content {
            font-size: 1em;
            line-height: 1.6;
            margin: 20px 0;
        }

        .content ul,
        .content ol {
            margin: 20px 0;
            padding-left: 20px;
        }

        .content ul li,
        .content ol li {
            margin: 10px 0;
        }

        .content img {
            width: 100%;
            height: auto;
            margin: 20px 0;
        }

        @media (max-width: 768px) {
            .main-title {
                font-size: 2em;
            }

            .small-title {
                font-size: 1em;
            }
        }

        input[type="file"] {
            display: none;
        }

        .custom-file-label {
            align-items: center;
            display: flex;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            text-align: center;
            background-color: #eeeeee;
            /* width: 100%; */
            justify-content: center;
            padding: 5px;
        }

        /* .custom-file-label:hover {
            color: red;
        } */

        .file-name {
            /* margin-top: 10px; */
            color: #f70000;
        }
    </style>
</head>

<body>
    <form id="blog-form" action="/submit-blog" method="POST">
        <label for="main-title">Title</label>
        <input type="text" id="main-title" name="main_title" placeholder="Enter a Title" required>

        <input type="file" id="upload-image"
            onchange="uploadimage('upload-image', 'upload-preText', 'upload-image-name')">
        <label for="upload-image" class="custom-file-label">
            <span id="upload-preText"><i class="fa fa-upload"></i> Cover Image </span>
            <span class="file-name" id="upload-image-name"></span>
        </label>

        <label for="small-title">Category</label>
        <input type="text" id="small-title" name="small_title" placeholder="Enter Category" required>

        <div id="additional-elements"></div>
        <div class="tag-selector">
            <li id="heading"><i class="fa fa-header"></i> Heading</li>
            <li id="paragraph"><i class="fa fa-paragraph"></i> Paragraph</li>
            <li id="ordered-list"><i class="fa fa-list-ol"></i> Ordered-List</li>
            <li id="unordered-list"><i class="fa fa-list-ul"></i> Unordered-List</li>
            <li id="image"><i class="fa fa-picture-o"></i> Image</li>
        </div>

        <button type="submit">Submit Blog</button>
    </form>

    <div class="blog-preview" id="blog-preview" style="display: none;"></div>

    <script>
        async function uploadimage(image, preText, name) {
            const fileInput = document.getElementById(image);
            const file = fileInput.files[0];

            if (!file) {
                alert('Please select a file to upload.');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);
            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData,
                });

                if (!response.ok) {
                    throw new Error(`Failed to upload: ${response.statusText}`);
                }

                const result = await response.json();
                alert('Image uploaded successfully!');
                console.log(result);

                const fileNameDisplay = document.getElementById(name);
                const prefixText = document.getElementById(preText);
                if (fileInput.files.length > 0) {
                    fileNameDisplay.innerHTML = `${result.filePath}`;
                    prefixText.innerHTML = 'Selected File : ';
                } else {
                    fileNameDisplay.innerHTML = '';
                }

                return result;
            } catch (error) {
                console.error('Error uploading file:', error);
                alert('Failed to upload the file.');
            }
        };

        const additionalElements = document.getElementById('additional-elements');
        const blogPreview = document.getElementById('blog-preview');

        document.getElementById('image').addEventListener('click', () => {
            const uniqueId = 'upload-image-' + Date.now();
            const preText = 'upload-preText-' + Date.now();
            const fileNameId = 'upload-image-name-' + Date.now();
            const imageElement = document.createElement('div');
            imageElement.className = 'image-upload-section';
            imageElement.innerHTML = `<input type="file" id="${uniqueId}" onchange="uploadimage('${uniqueId}', '${preText}', '${fileNameId}')">
            <label for="${uniqueId}" class="custom-file-label">
                <span id="${preText}">Choose Image</span>
                <span class="file-name" id="${fileNameId}"></span>
            </label>`;
            console.log(imageElement)
            document.getElementById('additional-elements').appendChild(imageElement);
        });

        document.getElementById('paragraph').addEventListener('click', () => {
            const paragraphElement = document.createElement('div');
            paragraphElement.innerHTML = `
            <label for="content">Paragraph</label>
            <textarea name="content" rows="4" placeholder="Add your content here"></textarea>`;
            additionalElements.appendChild(paragraphElement);
        });

        document.getElementById('ordered-list').addEventListener('click', () => {
            const orderedListElement = document.createElement('div');
            orderedListElement.className = "ordered-list";
            orderedListElement.innerHTML = `
            <div class="options">
                <label>Ordered-List</label>
                <div class="types">
                    <input type="radio" name="ol_type_${Date.now()}" value="1" checked><label>1,2,3</label>
                    <input type="radio" name="ol_type_${Date.now()}" value="a"><label>a,b,c</label>
                    <input type="radio" name="ol_type_${Date.now()}" value="A"><label>A,B,C</label>
                    <input type="radio" name="ol_type_${Date.now()}" value="i"><label>i,ii,iii</label>
                </div>
                <span onclick="addPoint('ol', this)">+ Add Point</span>
            </div>
            <div class="container"></div>`;
            additionalElements.appendChild(orderedListElement);
        });

        document.getElementById('unordered-list').addEventListener('click', () => {
            const unorderedListElement = document.createElement('div');
            unorderedListElement.className = "unordered-list";
            unorderedListElement.innerHTML = `
            <div class="options">
                <label>Unordered-List</label>
                <div class="types">
                    <input type="radio" name="ul_type_${Date.now()}" value="circle" checked><label>Circle</label>
                    <input type="radio" name="ul_type_${Date.now()}" value="disc"><label>Disc</label>
                    <input type="radio" name="ul_type_${Date.now()}" value="square"><label>Square</label>
                    <input type="radio" name="ul_type_${Date.now()}" value="none"><label>None</label>
                </div>
                <span onclick="addPoint('ul', this)">+ Add Point</span>
            </div>
            <div class="container"></div>`;
            additionalElements.appendChild(unorderedListElement);
        });

        function addPoint(listType, triggerElement) {
            const container = triggerElement.parentElement.nextElementSibling;
            const inputField = document.createElement('input');
            inputField.type = 'text';
            inputField.placeholder = `Enter ${listType === 'ol' ? 'ordered' : 'unordered'} list item`;
            container.appendChild(inputField);
        }

        function getListType(block, listType) {
            const radioButton = block.querySelector(`input[name^="${listType}_type"]:checked`);
            if (radioButton) {
                return radioButton.value;
            } else {
                console.error(`No selected radio button for ${listType}`);
                return null;
            }
        }

        document.getElementById('heading').addEventListener('click', () => {
            const headingElement = document.createElement('div');
            headingElement.innerHTML = `
        <label for="heading-content">Heading</label>
        <input type="text" placeholder="Add heading here" id="heading-content">`;
            additionalElements.appendChild(headingElement);
        });

        document.getElementById('blog-form').addEventListener('submit', function (event) {
            event.preventDefault();

            const formData = {
                main_title: document.getElementById('main-title').value,
                cover_image: document.getElementById('upload-image-name').innerHTML,
                small_title: document.getElementById('small-title').value,
                blocks: []
            };

            if (formData.main_title === '' || formData.cover_image === '' || formData.small_title === '') {
                return alert('Please fill the empty fields')
            }

            additionalElements.querySelectorAll('div').forEach((block) => {
                if (block.classList.contains('ordered-list')) {
                    const listType = getListType(block, 'ol');
                    const items = [...block.querySelectorAll('.container input')].map(input => input.value);
                    formData.blocks.push({ type: 'ordered-list', listType, items });
                } else if (block.classList.contains('unordered-list')) {
                    const listType = getListType(block, 'ul');
                    const items = [...block.querySelectorAll('.container input')].map(input => input.value);
                    formData.blocks.push({ type: 'unordered-list', listType, items });
                } else if (block.querySelector('textarea')) {
                    const content = block.querySelector('textarea').value;
                    formData.blocks.push({ type: 'paragraph', content });
                } else if (block.querySelector('input[type="text"]')) {
                    const content = block.querySelector('input[type="text"]').value;
                    formData.blocks.push({ type: 'heading', content });
                } else if (block.querySelector('input[type="file"]')) {
                    const sub_id = block.querySelector('input[type="file"]').id.split('-').pop()
                    const content = document.getElementById(`upload-image-name-${sub_id}`).innerHTML;
                    formData.blocks.push({ type: 'image', content });
                }
            });

            generatePreview(formData);
        });

        function generatePreview(formData) {
            const htmlContent = `<div class="container">
            <img src="${formData.cover_image}" alt="Header Image" class="header-image">
            <div class="small-title">${formData.small_title}</div>
            <div class="main-title">${formData.main_title}</div>
            <div class="content">
                ${formData.blocks.map(block => {
                if (block.type === 'paragraph') {
                    return `<p>${block.content}</p>`;
                } else if (block.type === 'ordered-list') {
                    return `<ol type="${block.listType}">${block.items.map(item => `<li>${item}</li>`).join('')}</ol>`;
                } else if (block.type === 'unordered-list') {
                    return `<ul style="list-style-type: ${block.listType}">${block.items.map(item => `<li>${item}</li>`).join('')}</ul>`;
                } else if (block.type === 'heading') {
                    return `<div class="sub-heading">${block.content}</div>`;
                } else if (block.type === 'image') {
                    return `<img src="${block.content}" alt="Image" class="sub-image">`;
                }
            }).join('')}
            </div>
            </div>`;

            blogPreview.style.display = 'block';
            blogPreview.innerHTML = htmlContent;

            fetch('/blog/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    content: htmlContent,
                }),
            })
                .then(response => response.json())
                .then(data => console.log(data))
                .catch(error => console.error('Error:', error));
        }

    </script>

    <script>
        document.addEventListener("keydown", function (event) {
            if ((event.key === "F5") || (event.ctrlKey && event.key === "r")) {
                event.preventDefault();
                alert("Page refresh is disabled!");
            }
        });

        window.addEventListener("beforeunload", function (event) {
            event.preventDefault();
            event.returnValue = "";
        });

        document.addEventListener("contextmenu", function (event) {
            event.preventDefault();
            alert("Right-click is disabled!");
        });

        history.pushState(null, "", location.href);
        window.addEventListener("popstate", function () {
            history.pushState(null, "", location.href);
            alert("Back/Forward navigation is disabled!");
        });
    </script>

</body>

</html>